{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport initialState from \"../../initialState\";\nconst FETCH_PROFILES_URL = limit => `https://randomuser.me/api/?results=${limit}`;\n_c = FETCH_PROFILES_URL;\nexport const fetchProfiles = createAsyncThunk(\"FETCH_PROFILES\", async limit => {\n  const res = await fetch(FETCH_PROFILES_URL(limit));\n  const {\n    results\n  } = await res.json();\n  return results;\n});\nexport const fetchMoreProfiles = createAsyncThunk(\"FETCH_PROFILES\", async ({\n  limit,\n  profiles\n}) => {\n  const res = await fetch(FETCH_PROFILES_URL(limit));\n  const {\n    results\n  } = await res.json();\n  profiles.push(results);\n  return profiles;\n});\nconst slice = createSlice({\n  name: \"profiles\",\n  initialState,\n  reducers: {\n    fetchProfiles(state, action) {\n      state.profiles.push(...action.payload);\n    },\n    clearProfiles(state) {\n      state.profiles = initialState.profiles;\n    },\n    dismissfetchProfilesError(state) {\n      state.fetchProfilesError = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProfiles.pending, state => {\n      state.fetchProfilesPending = true;\n      state.fetchProfilesError = null;\n    });\n    builder.addCase(fetchProfiles.fulfilled, (state, action) => {\n      state.fetchProfilesPending = false;\n      state.fetchProfilesError = null;\n      state.profiles = action.payload;\n    });\n    builder.addCase(fetchProfiles.rejected, (state, action) => {\n      state.fetchProfilesPending = false;\n      state.fetchProfilesError = {\n        message: \"something went wrong\"\n      };\n    });\n  }\n});\nexport const {\n  reducer,\n  actions: {\n    clearProfiles\n  }\n} = slice;\nvar _c;\n$RefreshReg$(_c, \"FETCH_PROFILES_URL\");","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","FETCH_PROFILES_URL","limit","_c","fetchProfiles","res","fetch","results","json","fetchMoreProfiles","profiles","push","slice","name","reducers","state","action","payload","clearProfiles","dismissfetchProfilesError","fetchProfilesError","extraReducers","builder","addCase","pending","fetchProfilesPending","fulfilled","rejected","message","reducer","actions","$RefreshReg$"],"sources":["/Users/robineriksson/dev/react-typescript/src/features/profilePage/redux/fetchProfiles.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport initialState from \"../../initialState\";\nimport { ProfileType } from \"../constants/types\";\n\nconst FETCH_PROFILES_URL = (limit: number) =>\n  `https://randomuser.me/api/?results=${limit}`;\n\nexport const fetchProfiles = createAsyncThunk(\n  \"FETCH_PROFILES\",\n  async (limit: number) => {\n    const res = await fetch(FETCH_PROFILES_URL(limit));\n    const { results } = await res.json();\n    return results as ProfileType[];\n  }\n);\ntype fetchMoreProfilesType = {\n  limit: number;\n  profiles: ProfileType[];\n};\n\nexport const fetchMoreProfiles = createAsyncThunk(\n  \"FETCH_PROFILES\",\n  async ({ limit, profiles }: fetchMoreProfilesType) => {\n    const res = await fetch(FETCH_PROFILES_URL(limit));\n    const { results } = await res.json();\n    profiles.push(results);\n    return profiles as ProfileType[];\n  }\n);\n\nconst slice = createSlice({\n  name: \"profiles\",\n  initialState,\n  reducers: {\n    fetchProfiles(state, action) {\n      state.profiles.push(...action.payload);\n    },\n    clearProfiles(state) {\n      state.profiles = initialState.profiles;\n    },\n    dismissfetchProfilesError(state) {\n      state.fetchProfilesError = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchProfiles.pending, (state) => {\n      state.fetchProfilesPending = true;\n      state.fetchProfilesError = null;\n    });\n\n    builder.addCase(fetchProfiles.fulfilled, (state, action) => {\n      state.fetchProfilesPending = false;\n      state.fetchProfilesError = null;\n      state.profiles = action.payload;\n    });\n\n    builder.addCase(fetchProfiles.rejected, (state, action) => {\n      state.fetchProfilesPending = false;\n      state.fetchProfilesError = {\n        message: \"something went wrong\",\n      };\n    });\n  },\n});\n\nexport const {\n  reducer,\n  actions: { clearProfiles },\n} = slice;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,YAAY,MAAM,oBAAoB;AAG7C,MAAMC,kBAAkB,GAAIC,KAAa,IACtC,sCAAqCA,KAAM,EAAC;AAACC,EAAA,GAD1CF,kBAAkB;AAGxB,OAAO,MAAMG,aAAa,GAAGN,gBAAgB,CAC3C,gBAAgB,EAChB,MAAOI,KAAa,IAAK;EACvB,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACL,kBAAkB,CAACC,KAAK,CAAC,CAAC;EAClD,MAAM;IAAEK;EAAQ,CAAC,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EACpC,OAAOD,OAAO;AAChB,CACF,CAAC;AAMD,OAAO,MAAME,iBAAiB,GAAGX,gBAAgB,CAC/C,gBAAgB,EAChB,OAAO;EAAEI,KAAK;EAAEQ;AAAgC,CAAC,KAAK;EACpD,MAAML,GAAG,GAAG,MAAMC,KAAK,CAACL,kBAAkB,CAACC,KAAK,CAAC,CAAC;EAClD,MAAM;IAAEK;EAAQ,CAAC,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EACpCE,QAAQ,CAACC,IAAI,CAACJ,OAAO,CAAC;EACtB,OAAOG,QAAQ;AACjB,CACF,CAAC;AAED,MAAME,KAAK,GAAGb,WAAW,CAAC;EACxBc,IAAI,EAAE,UAAU;EAChBb,YAAY;EACZc,QAAQ,EAAE;IACRV,aAAaA,CAACW,KAAK,EAAEC,MAAM,EAAE;MAC3BD,KAAK,CAACL,QAAQ,CAACC,IAAI,CAAC,GAAGK,MAAM,CAACC,OAAO,CAAC;IACxC,CAAC;IACDC,aAAaA,CAACH,KAAK,EAAE;MACnBA,KAAK,CAACL,QAAQ,GAAGV,YAAY,CAACU,QAAQ;IACxC,CAAC;IACDS,yBAAyBA,CAACJ,KAAK,EAAE;MAC/BA,KAAK,CAACK,kBAAkB,GAAG,IAAI;IACjC;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACnB,aAAa,CAACoB,OAAO,EAAGT,KAAK,IAAK;MAChDA,KAAK,CAACU,oBAAoB,GAAG,IAAI;MACjCV,KAAK,CAACK,kBAAkB,GAAG,IAAI;IACjC,CAAC,CAAC;IAEFE,OAAO,CAACC,OAAO,CAACnB,aAAa,CAACsB,SAAS,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC1DD,KAAK,CAACU,oBAAoB,GAAG,KAAK;MAClCV,KAAK,CAACK,kBAAkB,GAAG,IAAI;MAC/BL,KAAK,CAACL,QAAQ,GAAGM,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC;IAEFK,OAAO,CAACC,OAAO,CAACnB,aAAa,CAACuB,QAAQ,EAAE,CAACZ,KAAK,EAAEC,MAAM,KAAK;MACzDD,KAAK,CAACU,oBAAoB,GAAG,KAAK;MAClCV,KAAK,CAACK,kBAAkB,GAAG;QACzBQ,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXC,OAAO;EACPC,OAAO,EAAE;IAAEZ;EAAc;AAC3B,CAAC,GAAGN,KAAK;AAAC,IAAAT,EAAA;AAAA4B,YAAA,CAAA5B,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}